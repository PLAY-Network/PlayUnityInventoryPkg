<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RGNInventory</name>
    </assembly>
    <members>
        <member name="T:RGN.Modules.Inventory.InventoryModule">
            <summary>
            Represents the inventory module in the RGN system. This class manages inventory data.
            Virtual items are referenced by the inventory data.
            </summary>
        </member>
        <member name="F:RGN.Modules.Inventory.InventoryModule.ITEM_ADDED_EVENT_TOPIC">
            <summary>
            This topic event is fired for signed in user when a new inventory item
            is added to the users inventory. It is not fired when the user purchases an item.
            Name of the topic for MessagingModule to subscribe on.
            You can use MessagingModule to subscribe on this event.
            Please use the <see cref="M:RGN.Modules.Inventory.InventoryModule.ParseInventoryItemData(System.String)"/> method to parse the message payload
            </summary>
        </member>
        <member name="F:RGN.Modules.Inventory.InventoryModule.ITEM_REMOVED_EVENT_TOPIC">
            <summary>
            This topic event is fired for signed in user when an inventory item is removed
            from the users inventory.
            Name of the topic for MessagingModule to subscribe on.
            You can use MessagingModule to subscribe on this event.
            Please use the <see cref="M:RGN.Modules.Inventory.InventoryModule.ParseInventoryItemsData(System.String)"/> method to parse the message payload
            </summary>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryModule.AddToInventoryAsync(System.String,System.Int32,RGN.Model.Properties,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a specified quantity of a virtual item to the current logged in user's inventory.
            </summary>
            <param name="virtualItemId">The unique identifier of the virtual item to be added to the inventory.</param>
            <param name="quantity">The quantity of the virtual item to be added. The default value is 1.</param>
            <param name="properties">Optional additional properties associated with the item. The default is null.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>
            A Task that represents the asynchronous operation.
            The task result contains an <see cref="T:RGN.Modules.Inventory.AddToInventoryResponseData"/> object which holds the response data of the operation.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the user is not logged in.</exception>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryModule.AddToInventoryAsync(System.String,System.String,System.Int32,RGN.Model.Properties,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a specified quantity of a virtual item to the inventory for a specified user.
            </summary>
            <param name="userId">The unique identifier of the user whose inventory will be updated.</param>
            <param name="virtualItemId">The unique identifier of the virtual item to be added to the user's inventory.</param>
            <param name="quantity">The quantity of the virtual item to be added. The default value is 1.</param>
            <param name="properties">Optional additional properties associated with the item. The default is null.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>
            A Task that represents the asynchronous operation.
            The task result contains an <see cref="T:RGN.Modules.Inventory.AddToInventoryResponseData"/> object which holds the response data of the operation.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the ownedItemId is null or empty.</exception>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryModule.AddToInventoryAsync(System.String,RGN.Modules.Inventory.InventoryItemData,System.Threading.CancellationToken)">
            <summary>
            Asynchronously adds a specified inventory item to the inventory for a specified user.
            </summary>
            <param name="userId">The unique identifier of the user whose inventory will be updated.</param>
            <param name="inventoryData">The data of the inventory item to be added to the user's inventory. Includes item's unique identifier, quantity and optional additional properties.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>
            A Task that represents the asynchronous operation.
            The task result contains an <see cref="T:RGN.Modules.Inventory.AddToInventoryResponseData"/> object which holds the response data of the operation.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the userId or inventoryData.ownedItemId is null or empty.</exception>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryModule.RemoveByVirtualItemIdAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously removes a specified quantity of a virtual item from a user's inventory by its unique identifier.
            </summary>
            <param name="userId">The unique identifier of the user whose inventory to modify.</param>
            <param name="virtualItemId">The unique identifier of the virtual item to remove.</param>
            <param name="quantity">The quantity of the virtual item to remove. Must be a positive number.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="virtualItemId"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="quantity"/> is less than or equal to zero.
            </exception>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:RGN.Modules.Inventory.RemoveByVirtualItemIdResponseData"/> object which holds the server's response data.
            </returns>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryModule.RemoveByInventoryItemIdAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Asynchronously removes a specified quantity of a virtual item from a user's inventory by its owned item identifier.
            </summary>
            <param name="userId">The unique identifier of the user whose inventory to modify.</param>
            <param name="ownedItemId">The unique identifier of the owned item to remove.</param>
            <param name="quantity">The quantity of the owned item to remove. Must be a positive number. Default is 1.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="ownedItemId"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="quantity"/> is less than or equal to zero.
            </exception>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:RGN.Modules.Inventory.RemoveByOwnedIdResponseData"/> object which holds the server's response data.
            </returns>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryModule.GetPropertiesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns json string or throws an exception if there are no json for virtual item
            </summary>
            <param name="ownedItemId"></param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>Returns json as string</returns>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryModule.SetPropertiesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Set json on a given ownedItemId. 
            </summary>
            <param name="ownedItemId"></param>
            <param name="json"></param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>Returns json as string</returns>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryModule.GetUpgradesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get user owned item upgrades, returns all upgrades for all owned items for virtual item ownedItemId
            </summary>
            <param name="ownedItemId">The ownedItemId of the virtual item to search in inventory for</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryModule.UpgradeAsync(System.String,System.Int32,System.Collections.Generic.List{RGN.Modules.Currency.Currency},System.String,System.Threading.CancellationToken)">
            <summary>
            Upgrades user owned virtual item to a new level
            </summary>
            <param name="ownedItemId">The ownedItemId of the owned inventory item</param>
            <param name="newUpgradeLevel">New upgrade level for the owned virtual item</param>
            <param name="upgradePrice">Optional parameter for set price of upgrade.</param>
            <param name="upgradeId">Optional parameter for upgrade ownedItemId. One owned item can have multiple upgrades
            with different ids. By default the upgradeId is 'default'</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryModule.GetByIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get single owned virtual item inventory data by ownedItemId
            </summary>
            <param name="ownedItemId">The id of the owned item in users inventory</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryModule.GetByIdsAsync(System.Collections.Generic.List{System.String},System.Threading.CancellationToken)">
            <summary>
            Get owned virtual items inventory data by ownedItemIds
            Returns empty if non of the items ids exist for current user
            </summary>
            <param name="ownedItemIds">The ids collection of the owned items in users inventory</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryModule.GetByVirtualItemIdsAsync(System.Collections.Generic.List{System.String},System.Threading.CancellationToken)">
            <summary>
            Get multiple owned virtual items inventory data by virtual items ids
            </summary>
            <param name="virtualItemIds"></param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryModule.GetAllForCurrentAppAsync(System.Threading.CancellationToken)">
            <summary>
            Get multiple owned virtual items inventory data for current app
            </summary>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryModule.GetByAppIdsAsync(System.Collections.Generic.List{System.String},System.Int64,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get multiple owned virtual items inventory data by app ids
            </summary>
            <param name="appIds"></param>
            <param name="startAfter">An optional parameter representing an inventory items 'updatedAt' field after which start the retrieval</param>
            <param name="limit"></param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryModule.GetWithVirtualItemsDataForCurrentAppAsync(System.Int64,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get multiple owned virtual items inventory data for current app with the Virtual Item data included
            </summary>
            <param name="startAfter">An optional parameter representing an inventory items 'updatedAt' field after which start the retrieval</param>
            <param name="limit">The maximum number of items to return</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryModule.GetWithVirtualItemsDataByAppIdsAsync(System.Collections.Generic.List{System.String},System.Int64,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get multiple owned virtual items inventory data by app ids with the Virtual Item data included
            </summary>
            <param name="appIds"></param>
            <param name="startAfter">An optional parameter representing an inventory items 'updatedAt' field after which start the retrieval</param>
            <param name="limit"></param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryModule.ParseInventoryItemData(System.String)">
            <summary>
            Parses a JSON string representation of an <see cref="T:RGN.Modules.Inventory.InventoryItemData"/> object.
            </summary>
            <param name="json">The JSON string representation of an <see cref="T:RGN.Modules.Inventory.InventoryItemData"/> object.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="json"/> is null or empty.
            </exception>
            <returns>
            An <see cref="T:RGN.Modules.Inventory.InventoryItemData"/> object represented by the JSON string. 
            Returns null if the JSON string does not represent a valid <see cref="T:RGN.Modules.Inventory.InventoryItemData"/> object.
            </returns>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryModule.ParseInventoryItemsData(System.String)">
            <summary>
            Parses a JSON string representation of a list of <see cref="T:RGN.Modules.Inventory.InventoryItemData"/> objects.
            </summary>
            <param name="json">The JSON string representation of a list of <see cref="T:RGN.Modules.Inventory.InventoryItemData"/> objects.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="json"/> is null or empty.
            </exception>
            <returns>
            A list of <see cref="T:RGN.Modules.Inventory.InventoryItemData"/> objects represented by the JSON string.
            Returns null if the JSON string does not represent a valid list of <see cref="T:RGN.Modules.Inventory.InventoryItemData"/> objects.
            </returns>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryModule.GetByTagsAsync(System.Collections.Generic.List{System.String},System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves a list of <see cref="T:RGN.Modules.Inventory.InventoryItemData"/> objects from the Ready Games Network (RGN)
            for current logged in user
            </summary>
            <param name="tags">A list of tags used to filter the inventory items.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided tags list is null or empty.</exception>
            <returns>A Task representing the asynchronous operation. The Result property of the Task returns a list of
            <see cref="T:RGN.Modules.Inventory.InventoryItemData"/> objects representing the inventory items that match the specified tags and appId.</returns>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryModule.GetTagsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves the tags of an owned item in the inventory by its identifier for current logged in user
            </summary>
            <param name="ownedItemId">The unique identifier of the owned item for which to retrieve tags.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="ownedItemId"/> is null or empty.
            </exception>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains a list of tags associated with the owned item.
            </returns>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryModule.SetTagsAsync(System.String,System.Collections.Generic.List{System.String},System.Threading.CancellationToken)">
            <summary>
            Asynchronously sets the tags for an owned item in the inventory by its identifier for current logged in user
            </summary>
            <param name="ownedItemId">The unique identifier of the owned item for which to set tags.</param>
            <param name="tags">A list of tags to be associated with the owned item.</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="ownedItemId"/> is null or empty, or when <paramref name="tags"/> is null.
            </exception>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains a list of tags associated with the owned item.
            </returns>
        </member>
        <member name="T:RGN.Modules.Inventory.InventoryItemData">
            <summary>
            Represents the data structure of an inventory item within the Ready Games Network (RGN).
            </summary>
        </member>
        <member name="F:RGN.Modules.Inventory.InventoryItemData.id">
            <summary>
            Unique id of the inventory item
            </summary>
        </member>
        <member name="F:RGN.Modules.Inventory.InventoryItemData.virtualItemId">
            <summary>
            The Virtual Item id for this inventory item
            </summary>
        </member>
        <member name="F:RGN.Modules.Inventory.InventoryItemData.appIds">
            <summary>
            List of application ids where this item is used
            </summary>
        </member>
        <member name="F:RGN.Modules.Inventory.InventoryItemData.tags">
            <summary>
            List of tags to filter the offers
            You can place multiple inventory items into one category tag
            For example in a shooter game: "guns", "rifles"
            Later in the UI you can get only inventory items for specific tag
            </summary>
        </member>
        <member name="F:RGN.Modules.Inventory.InventoryItemData.quantity">
            <summary>
            How many items the user have in inventory
            If the Virtual Item is non stackable, then this value should be
            always one
            For stackable Virtual Items it represents the count of Virtual Items
            in user inventory.
            </summary>
        </member>
        <member name="F:RGN.Modules.Inventory.InventoryItemData.status">
            <summary>
            Current status of inventory item
            Always confirmed for nonNFT items
            NFT items after purchase have pending status
            After blockchain confirmation the item
            will have confirmed status
            </summary>
        </member>
        <member name="F:RGN.Modules.Inventory.InventoryItemData.createdAt">
            <summary>
            Date and time when the inventory item was created
            in milliseconds since midnight, January 1, 1970 UTC.
            Refer to <see cref="T:RGN.Utility.DateTimeUtility"/> for helper methods.
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.Inventory.InventoryItemData.updatedAt">
            <summary>
            Date and time when the inventory item data was last time updated
            in milliseconds since midnight, January 1, 1970 UTC.
            Refer to <see cref="T:RGN.Utility.DateTimeUtility"/> for helper methods.
            This field is automatically populated by the backend
            </summary>
        </member>
        <member name="F:RGN.Modules.Inventory.InventoryItemData.itemUpgrades">
            <summary>
            The upgrades for non stackable virtual item
            The user can upgrade the Virtual Items he owns
            The upgrades can change some of the json of Virtual Items
            It is possible to have multiple upgrades with different names and values
            for one item.
            </summary>
        </member>
        <member name="F:RGN.Modules.Inventory.InventoryItemData.properties">
            <summary>
            List of inventory item custom json. It is used to store
            game specific json in json format.
            For example: you can attach some json like
            "additiona_description", "in_app_products", "display_animation" for this
            inventory item
            </summary>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryItemData.GetVirtualItem">
            <summary>
            Retrieves the associated virtual item data if available.
            </summary>
            <returns>The virtual item associated with this inventory item.
            This will be null unless the inventory item was retrieved
            using <see cref="!:InventoryModule.GetWithVirtualItemsDataForCurrentAppAsync(string, int)"/> or
            <see cref="!:InventoryModule.GetWithVirtualItemsDataByAppIdsAsync(List&lt;string&gt;, string, int)"/> methods.
            </returns>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryItemData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryItemData.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Constructs an instance of InventoryItemData using the specified virtual item id and application ids.
            </summary>
            <param name="virtualItemId">The unique identifier of the virtual item to be added.</param>
            <param name="appIds">The list of application identifiers where this item is used.</param>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryItemData.#ctor(System.String,System.Collections.Generic.List{System.String},System.Int32,RGN.Model.Properties)">
            <summary>
            Constructs an instance of InventoryItemData using the specified virtual item id, application ids, quantity, and properties.
            </summary>
            <param name="virtualItemId">The unique identifier of the virtual item to be added.</param>
            <param name="appIds">The list of application identifiers where this item is used.</param>
            <param name="quantity">The quantity of the virtual item to be added. The default value is 1.</param>
            <param name="properties">The list of inventory item custom properties in json format. It is used to store game specific properties.</param>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryItemData.#ctor(RGN.Modules.Inventory.InventoryItemData,RGN.Modules.VirtualItems.VirtualItem)">
            <summary>
            Constructs an instance of InventoryItemData using an existing InventoryItemData and VirtualItem.
            </summary>
            <param name="inventoryItem">An instance of InventoryItemData to be cloned.</param>
            <param name="virtualItem">The virtual item associated with this inventory item.</param>
        </member>
        <member name="M:RGN.Modules.Inventory.InventoryItemData.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:RGN.Modules.Inventory.AddVirtualItemToUserInventoryRequestData">
            <summary>
            Request to add new item in user inventory
            </summary>
        </member>
        <member name="T:RGN.Modules.Inventory.AddToInventoryResponseData">
            <summary>
            Response that return the new quantity of the item recently added
            </summary>
        </member>
        <member name="M:RGN.Modules.Inventory.VirtualItemUpgrade.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
    </members>
</doc>
